import Game;
/*
import Math;
import Graphics2D;
import Random;
*/

/*
Mouse input example.
*/

const FPS = 30;
const SCREEN_WIDTH = 640;
const SCREEN_HEIGHT = 480;

const BLACK = 0;
const GRAY = 1;
const BLUE = 2;
const PURPLE = 3;
const WHITE = 4;

function get_color(colorId) {
    COLORS_LOOKUP = {
        BLACK: [0, 0, 0],
        GRAY: [80, 80, 80],
        BLUE: [0, 0, 255],
        PURPLE: [128, 0, 128],
        WHITE: [255, 255, 255],
    };
    return COLORS_LOOKUP[colorId];
}

// Build a 2D grid (list of lists)
function make_grid(width, height, defaultValue) {
    columns = [];
    for (x = 0; x < width; ++x) {
        column = [];
        for (y = 0; y < height; ++y) {
            column.add(defaultValue);
        }
        columns.add(column);
    }
    return columns;
}

function main() {
    // window = new Game.GameWindow("Mouse testing", FPS, SCREEN_WIDTH, SCREEN_HEIGHT);

    tile_size = 20;

    // Create a grid to cover the screen where each square is the size of tile_size
    grid_width = SCREEN_WIDTH / tile_size;
    grid_height = SCREEN_HEIGHT / tile_size;
    grid = make_grid(grid_width, grid_height, BLACK);

    mouse_col = -1;
    mouse_row = -1;
    
    mouse_state = 0;

    // Game loop
/*
    while (true) {

        events = window.pumpEvents();
        color = BLACK;
        for (event : events) {
            if (event.type == Game.EventType.QUIT) return; // alt+f4, close button, etc

            if (event.type == Game.EventType.MOUSE_MOVE) {
                // Figure out which tile the mouse event happened over.
                mouse_col = event.x / tile_size;
                mouse_row = event.y / tile_size;
            }
            else if (event.type == Game.EventType.MOUSE_LEFT_DOWN)
                mouse_state = mouse_state | 1;
            else if (event.type == Game.EventType.MOUSE_LEFT_UP)
                mouse_state = mouse_state ^ 1;
            else if (event.type == Game.EventType.MOUSE_RIGHT_DOWN)
                mouse_state = mouse_state | 2;
            else if (event.type == Game.EventType.MOUSE_RIGHT_UP)
                mouse_state = mouse_state ^ 2;


            }
        }

        // Follow the cursor and change the color of that tile.
        // If the left mouse button is held down, change the tile to blue.
        // If the right mouse button is held down, change the tile to purple.
        // Otherwise, change the tile to gray.
        switch (mouse_state) {
            case 1: color = BLUE;
            break;
            case 2: color = PURPLE;
            break;
            default: color = GRAY;
        }
        if (mouse_col >= 0 && mouse_col < grid_width &&
            mouse_row >= 0 && mouse_row < grid_height) {
            grid[mouse_col][mouse_row] = color;
        }

        // Set the background to black
        Graphics2D.Draw.fill(0, 0, 0);

        for (row = 0; row < grid_height; ++row) {
            for (col = 0; col < grid_width; ++col) {
                if (col == mouse_col && row == mouse_row) {
                    // Always display the tile the mouse is over as white.
                    color = WHITE;
                } else {
                    color = grid[col][row];
                }

                rgb = get_color(color);

                // Draw the color
                Graphics2D.Draw.rectangle(
                    col * tile_size,
                    row * tile_size,
                    tile_size,
                    tile_size,
                    rgb[0],
                    rgb[1],
                    rgb[2]
                );
            }
        }

        // End the frame
        window.clockTick();
    }
        */
}
